{"ast":null,"code":"var _jsxFileName = \"/Users/othmanghani.13/Desktop/OvGU/Thesis/footprint-vis/src/components/TypingEffect.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TypingEffect = ({\n  words,\n  speed = 100,\n  delay = 1000,\n  disableSpaces = false,\n  onComplete\n}) => {\n  _s();\n  const [displayedText, setDisplayedText] = useState(\"\"); // Stores final text (prevents reset)\n  const [currentWord, setCurrentWord] = useState(\"\"); // Stores the currently typing word\n  const [wordIndex, setWordIndex] = useState(0);\n  const [charIndex, setCharIndex] = useState(0);\n  useEffect(() => {\n    if (wordIndex == 0) {\n      setTimeout(() => {}, 1000);\n    }\n    if (wordIndex < words.length) {\n      if (charIndex < words[wordIndex].length) {\n        const timeout = setTimeout(() => {\n          setCurrentWord(prev => prev + words[wordIndex][charIndex]); // Type each letter\n          setCharIndex(charIndex + 1);\n        }, speed);\n        return () => clearTimeout(timeout);\n      } else {\n        setTimeout(() => {\n          setDisplayedText(prev => prev + currentWord + (disableSpaces ? \"\" : \" \")); // Store typed word\n          setCurrentWord(\"\"); // Reset for next word\n          if (wordIndex === words.length - 1) {\n            onComplete === null || onComplete === void 0 ? void 0 : onComplete(); // Trigger next effect\n          } else {\n            setWordIndex(wordIndex + 1);\n            setCharIndex(0);\n          }\n        }, delay);\n      }\n    }\n  }, [charIndex, wordIndex, words, speed, delay, disableSpaces, onComplete, currentWord]);\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: displayedText + currentWord\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 12\n  }, this); // Show completed words + currently typing word\n};\n_s(TypingEffect, \"hq3GtRNZ0z2Mq5tyuliKa7aXdS4=\");\n_c = TypingEffect;\nexport default TypingEffect;\nvar _c;\n$RefreshReg$(_c, \"TypingEffect\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","TypingEffect","words","speed","delay","disableSpaces","onComplete","_s","displayedText","setDisplayedText","currentWord","setCurrentWord","wordIndex","setWordIndex","charIndex","setCharIndex","setTimeout","length","timeout","prev","clearTimeout","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/othmanghani.13/Desktop/OvGU/Thesis/footprint-vis/src/components/TypingEffect.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst TypingEffect = ({ words, speed = 100, delay = 1000, disableSpaces = false, onComplete }) => {\n    const [displayedText, setDisplayedText] = useState(\"\"); // Stores final text (prevents reset)\n    const [currentWord, setCurrentWord] = useState(\"\"); // Stores the currently typing word\n    const [wordIndex, setWordIndex] = useState(0);\n    const [charIndex, setCharIndex] = useState(0);\n\n    useEffect(() => {\n        if(wordIndex == 0){\n            setTimeout(() => {}, 1000);\n        }\n\n        if (wordIndex < words.length) {\n            if (charIndex < words[wordIndex].length) {\n                const timeout = setTimeout(() => {\n                    setCurrentWord((prev) => prev + words[wordIndex][charIndex]); // Type each letter\n                    setCharIndex(charIndex + 1);\n                }, speed);\n                return () => clearTimeout(timeout);\n            } else {\n                setTimeout(() => {\n                    setDisplayedText((prev) => prev + currentWord + (disableSpaces ? \"\" : \" \")); // Store typed word\n                    setCurrentWord(\"\"); // Reset for next word\n                    if (wordIndex === words.length - 1) {\n                        onComplete?.(); // Trigger next effect\n                    } else {\n                        setWordIndex(wordIndex + 1);\n                        setCharIndex(0);\n                    }\n                }, delay);\n            }\n        }\n    }, [charIndex, wordIndex, words, speed, delay, disableSpaces, onComplete, currentWord]);\n\n    return <span>{displayedText + currentWord}</span>; // Show completed words + currently typing word\n};\n\nexport default TypingEffect;\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,YAAY,GAAGA,CAAC;EAAEC,KAAK;EAAEC,KAAK,GAAG,GAAG;EAAEC,KAAK,GAAG,IAAI;EAAEC,aAAa,GAAG,KAAK;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EAC9F,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACxD,MAAM,CAACa,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACpD,MAAM,CAACe,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC;EAC7C,MAAM,CAACiB,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAAC,CAAC,CAAC;EAE7CC,SAAS,CAAC,MAAM;IACZ,IAAGc,SAAS,IAAI,CAAC,EAAC;MACdI,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC;IAC9B;IAEA,IAAIJ,SAAS,GAAGV,KAAK,CAACe,MAAM,EAAE;MAC1B,IAAIH,SAAS,GAAGZ,KAAK,CAACU,SAAS,CAAC,CAACK,MAAM,EAAE;QACrC,MAAMC,OAAO,GAAGF,UAAU,CAAC,MAAM;UAC7BL,cAAc,CAAEQ,IAAI,IAAKA,IAAI,GAAGjB,KAAK,CAACU,SAAS,CAAC,CAACE,SAAS,CAAC,CAAC,CAAC,CAAC;UAC9DC,YAAY,CAACD,SAAS,GAAG,CAAC,CAAC;QAC/B,CAAC,EAAEX,KAAK,CAAC;QACT,OAAO,MAAMiB,YAAY,CAACF,OAAO,CAAC;MACtC,CAAC,MAAM;QACHF,UAAU,CAAC,MAAM;UACbP,gBAAgB,CAAEU,IAAI,IAAKA,IAAI,GAAGT,WAAW,IAAIL,aAAa,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;UAC7EM,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC;UACpB,IAAIC,SAAS,KAAKV,KAAK,CAACe,MAAM,GAAG,CAAC,EAAE;YAChCX,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAG,CAAC,CAAC,CAAC;UACpB,CAAC,MAAM;YACHO,YAAY,CAACD,SAAS,GAAG,CAAC,CAAC;YAC3BG,YAAY,CAAC,CAAC,CAAC;UACnB;QACJ,CAAC,EAAEX,KAAK,CAAC;MACb;IACJ;EACJ,CAAC,EAAE,CAACU,SAAS,EAAEF,SAAS,EAAEV,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAEC,aAAa,EAAEC,UAAU,EAAEI,WAAW,CAAC,CAAC;EAEvF,oBAAOV,OAAA;IAAAqB,QAAA,EAAOb,aAAa,GAAGE;EAAW;IAAAY,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAO,CAAC,CAAC,CAAC;AACvD,CAAC;AAAClB,EAAA,CAlCIN,YAAY;AAAAyB,EAAA,GAAZzB,YAAY;AAoClB,eAAeA,YAAY;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}